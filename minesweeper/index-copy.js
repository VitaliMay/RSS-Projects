
/*
class mineInfo {
  constructor() {
    this.mineHere = false // –º–∏–Ω–∞ –∑–¥–µ—Å—å?
    this.mineNear = 0 // —Å–∫–æ–ª—å–∫–æ –º–∏–Ω —Ä—è–¥–æ–º
    this.mineOpen = false // —Å–æ—Å—Ç–æ—è–Ω–∏ —è—á–µ–π–∫–∏, –æ—Ç–∫—Ä—ã—Ç–∞ –∏–ª–∏ –Ω–µ—Ç
  }
}
*/

let mineNumber = 10  // –≤—Å–µ–≥–æ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ) –º–∏–Ω
let column = 10
let row = 10

let scoreCloseBlock = column*row - mineNumber

// let matrix = Array(row).fill(Array(column).fill(new mineInfo)) // —Å–æ–∑–¥–∞—é —á–∏—Å—Ç—É—é –º–∞—Ç—Ä–∏—Ü—É
// console.log(matrix)

/************************************************************************************************** */
/************************************************************************************************** */
// let column = 10
// let row = 10

// const mine = {
//   x: 0,
//   y: 0
// }
const mine = {
  x: 0,
  y: 0,
  mineHere: false,
  mineNear: 0,
  mineOpen: false
}

//let matrix = Array(row).fill(Array(column).fill((mine))) // —Å–æ–∑–¥–∞—é —á–∏—Å—Ç—É—é –º–∞—Ç—Ä–∏—Ü—É –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ—Ö–æ–∂–µ —Å—Å—ã–ª–∞–µ—Ç—Å—è —Å–∞–º–∞ –Ω–∞ —Å–µ–±—è
// –ø—Ä–∏–¥–µ—Ç—Å—è –¥–µ–ª–∞—Ç—å —Ü–∏–∫–ª–æ–º

//let matrix = []

// let column = 10
// let row = 10

/*
let matrix = new Array(row);
for (let i = 0; i < row; i++) {
  matrix[i] = new Array(column);
  for (let j = 0; j < column; j++) {
    // –Ω–∞–¥–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –∫–∞–∂–¥–æ–π —è—á–µ–π–∫–∏, —Ç.–∫. –∏–Ω–∞—á–µ –±—É–¥–µ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –æ–±—ä–µ–∫—Ç –∏ X –∏ Y –ø—Ä–∏–º—É—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    // –ø–æ—ç—Ç–æ–º—É –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–ª–∞—Å—Å
    matrix[i][j] = {
      x: i,
      y: j,
      mineHere: false,
      mineNear: 0,
      mineOpen: false
    };
    mine.x = i
    mine.y = j
    matrix[i][j] = mine
  }
}
*/
class Mine {
  constructor(x, y) {
    this.x = x;
    this.y = y;
    this.mineHere = false;
    this.mineNear = 0;
    this.mineOpen = false;
  }
}

let matrix = new Array(row);
/*
for (let i = 0; i < row; i++) {
  matrix[i] = new Array(column);
  for (let j = 0; j < column; j++) {
    matrix[i][j] = new Mine(i, j);
  }
}
*/

// matrix[0][8].x = 25;
// console.log(matrix[0][8].x);
// console.log(matrix[0]);

/******************************************************* */
// —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–∏–Ω

const minePlacement = function(){

  /* —Å–æ–∑–¥–∞—é –º–∞—Ç—Ä–∏—Ü—É –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è */
  matrix = new Array(row); 
  for (let x = 0; x < row; x++) {
    matrix[x] = new Array(column);
    for (let y = 0; y < column; y++) {
      matrix[x][y] = new Mine(x, y);
    }
  }

  /* –≥–µ–Ω–µ—Ä–∏—Ä—É—é —Å–ª—É—á–∞–π–Ω—É—é —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫—É –º–∏–Ω */
  let countMine = mineNumber
  while(countMine){
    let x = Math.floor(Math.random() * row)
    let y = Math.floor(Math.random() * column)
    if(matrix[x][y].mineHere === false){
      matrix[x][y].mineHere = true
      countMine--
    }
  }
}

/********************************************************* */
/************** —Å—á–∏—Ç–∞—é –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω –≤–æ–∫—Ä—É–≥ —è—á–µ–π–∫–∏ */

const mineAround = function(){
  for (let i = 0; i < matrix.length; i++) {
     for (let k = 0; k < matrix[i].length; k++) {

      if ((i-1) >= 0 && (k-1) >= 0 && matrix[i-1][k-1].mineHere === true) matrix[i][k].mineNear = matrix[i][k].mineNear + 1;
      if ((i-1) >= 0 && (k) >= 0 && matrix[i-1][k].mineHere === true) matrix[i][k].mineNear = matrix[i][k].mineNear + 1;
      if ((i-1) >= 0 && (k + 1) < matrix[i].length && matrix[i-1][k+1].mineHere === true) matrix[i][k].mineNear = matrix[i][k].mineNear + 1;
      if ((i) >= 0 && (k + 1) < matrix[i].length && matrix[i][k+1].mineHere === true) matrix[i][k].mineNear = matrix[i][k].mineNear + 1;
      if ((i+1) < matrix.length && (k + 1) < matrix[i].length && matrix[i+1][k+1].mineHere === true) matrix[i][k].mineNear = matrix[i][k].mineNear + 1;
      if ((i+1) < matrix.length && (k) < matrix[i].length && matrix[i+1][k].mineHere === true) matrix[i][k].mineNear = matrix[i][k].mineNear + 1;
      if ((i+1) < matrix.length && (k-1) >= 0 && matrix[i+1][k-1].mineHere === true) matrix[i][k].mineNear = matrix[i][k].mineNear + 1;
      if ((i) < matrix.length && (k-1) >= 0 && matrix[i][k-1].mineHere === true) matrix[i][k].mineNear = matrix[i][k].mineNear + 1;
      /* —Ç–µ—Å—Ç */
      //if() matrix[i][k].mineNear = 88;
    }
  }
}

minePlacement()
mineAround()
console.log(matrix)

/*******–ú–æ–π –∫–æ–¥ –∏–∑ –±–∞—Å–∏–∫ js****(–°—á–∏—Ç–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω –≤–æ–∫—Ä—É–≥ —è—á–µ–π–∫–∏)****************************************************** */
/*
function minesweeper(matrix) {
  let result = [] // –æ–±—ä—è–≤–ª—è—é —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π –º–∞—Å—Å–∏–≤

  for (let i = 0; i < matrix.length; i++) {
    result[i] = [] // –ø—Ä–æ–¥–æ–ª–∂–∞—é —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –º–∞—Å—Å–∏–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    for (let k = 0; k < matrix[i].length; k++) {
      result[i][k] = 0 // –ø—Ä–∏—Å–≤–∞–∏–≤–∞—é –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ—Ä–∏—è –≤ –º–∞—Å—Å–∏–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
      // —Å—É—Ç—å —Ä–µ—à–µ–Ω–∏—è - –æ–±—Ö–æ–∂—É –ø–æ –∫—Ä—É–≥—É –∫–∞–∂–¥—É—é —è—á–µ–π–∫—É –º–∞—Ç—Ä–∏—Ü—ã,
      // –µ—Å–ª–∏ –Ω–∞—Ö–æ–∂—É –º–∏–Ω—É(true) —É–≤–µ–ª–∏—á–∏–≤–∞—é –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–∞ (–∏–ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —è—á–µ–π–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–≥–æ –º–∞—Å—Å–∏–≤–∞)
      if ((i-1) >= 0 && (k-1) >= 0 && matrix[i-1][k-1] === true) result[i][k] = result[i][k] + 1;
      if ((i-1) >= 0 && (k) >= 0 && matrix[i-1][k] === true) result[i][k] = result[i][k] + 1;
      if ((i-1) >= 0 && (k + 1) < matrix[i].length && matrix[i-1][k+1] === true) result[i][k] = result[i][k] + 1;
      if ((i) >= 0 && (k + 1) < matrix[i].length && matrix[i][k+1] === true) result[i][k] = result[i][k] + 1;
      if ((i+1) < matrix.length && (k + 1) < matrix[i].length && matrix[i+1][k+1] === true) result[i][k] = result[i][k] + 1;
      if ((i+1) < matrix.length && (k) < matrix[i].length && matrix[i+1][k] === true) result[i][k] = result[i][k] + 1;
      if ((i+1) < matrix.length && (k-1) >= 0 && matrix[i+1][k-1] === true) result[i][k] = result[i][k] + 1;
      if ((i) < matrix.length && (k-1) >= 0 && matrix[i][k-1] === true) result[i][k] = result[i][k] + 1;
    }
  }
  return result
}
*/






// minePlacement()
// console.log(matrix)


// cell unit block item elem (—è—á–µ–π–∫–∞ –∫–ª–µ—Ç–∫–∞ –±–ª–æ–∫)

/************************************************************************ */

function start(){

  document.querySelector('body').innerHTML += `<main class="main"></main>`;
  document.querySelector('.main').innerHTML = `<h1 class="title">Minesweeper</h1>`;
  document.querySelector('.main').innerHTML += `<div class="wrapper-text"></div>`; // –æ–±—ë—Ä—Ç–∫–∞ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
  document.querySelector('.main').innerHTML += `<div class="playboard"></div>`;

  let init = '';

  for (let i = 0; i < row*column; i++){

    mine.x = i % row // –æ–ø—Ä–µ–¥–µ–ª—è—é –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É X —è—á–µ–π–∫–∏
    mine.y = Math.floor(i/row) //  –æ–ø—Ä–µ–¥–µ–ª—è—é –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É Y —è—á–µ–π–∫–∏

    let mineJSON = JSON.stringify(mine)  // —ç—Ç–æ —É–∂–µ —Å—Ç—Ä–æ–∫–∞, –ø–æ—ç—Ç–æ–º—É –∫–∞–≤—ã—á–µ–∫ –≤ data –ù–ï –ù–ê–î–û!!!

    // let block = `<div class="block" data="${mine}">${i+1}</div>`;
    //let block = `<div class="block" data="${mineJSON}"><div>${i+1}</div></div>`;
    //let block = `<div class="block" data="${JSON.stringify(mine)}" data-x="${Math.floor(i/row)}" data-y="${i%row}"><div>${i+1}</div></div>`;
    // let block = `<div class="block" data-asds=${minewer} data-x="${Math.floor(i/row)}" data-y="${i%row}"><div>${i+1}</div></div>`;
    //let block = `<div class="block" data=${mineJSON} data-x="${Math.floor(i/row)}"><div>${i+1}</div></div>`;

    let temp_bomb = ''
    /* —Ç–µ—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ–º–± */
    // temp_bomb = matrix[mine.x][mine.y].mineNear
    // if(matrix[mine.x][mine.y].mineHere) temp_bomb = 88;


    // let block = `<div class="block" data=${mineJSON} "><div>${i+1}</div></div>`;
    let block = `<div class="block" data=${mineJSON} "><div>${temp_bomb}</div></div>`;

    init = init + block;
  }

  /*—Ñ–æ—Ä–º–∏—Ä—É—é HTML*/

  document.querySelector('.playboard').innerHTML = init;

}

start()

/* –ø–æ–ª—É—á–∞—é Node –∫–æ–ª–ª–µ–∫—Ü–∏—é –±–ª–æ–∫–æ–≤ */
let matrixDoc = document.querySelectorAll('.block')

/* –ø–æ–ª—É—á–∞—é –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —è—á–µ–π–∫–∏ –ø–æ –∫–ª–∏–∫—É */
/*
document.querySelectorAll('.block').forEach(function(block){
  block.addEventListener('click', function(){
    //alert(` x=${block.dataset.x}\n y=${block.dataset.y}`) // —Ä–∞–±–æ—Ç–∞–µ—Ç –≤—ã–≤–æ–¥–∏—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —è—á–µ–π–∫–∏ 
    //console.log(typeof block.getAttribute("data"))
    console.log(JSON.parse(block.getAttribute("data")))
    let coordinate = JSON.parse(block.getAttribute("data"))
    // console.log(` x=${coordinate.x}\n y=${coordinate.y}`)
    // console.log(` x=${coordinate.x}\n y=${coordinate.y}\n mineHere=${coordinate.mineHere}`)
    // console.log(` x=${coordinate.x}\n y=${coordinate.y}\n mineHere=${coordinate.mineHere}\n mineNear=${coordinate.mineNear}`)
    console.log(` x=${coordinate.x}\n y=${coordinate.y}\n mineHere=${coordinate.mineHere}\n mineNear=${coordinate.mineNear}\n mineOpen=${coordinate.mineOpen}`)

    /* —Ç–µ—Å—Ç–æ–≤–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –±–æ–º–± */
    /*
    let temp_bomb = ''
    temp_bomb = matrix[coordinate.x][coordinate.y].mineNear
    if(matrix[coordinate.x][coordinate.y].mineHere) temp_bomb = 'üí•';
    */

    // üí• —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ –≤–∑—Ä—ã–≤ HTML-–∫–æ–¥	&#128165; CSS-–∫–æ–¥	\1F4A5
    // –Ω–µ–∑–∞–∫—Ä–∞—à–µ–Ω–Ω—ã–π —Ñ–ª–∞–≥ &#9872; (\2690) –≤ CSS
    // –∑–∞–∫—Ä–∞—à–µ–Ω–Ω—ã–π —Ñ–ª–∞–≥ &#9873; (\2691) –≤ CSS
    // —à–ª–µ–º —Å –±–µ–ª—ã–º –∫—Ä–µ—Å—Ç–æ–º &#9937;
    // –∑–∞–∫—Ä–∞—à–µ–Ω–Ω—ã–π —É–ª—ã–±–∞—é—â–∏–π—Å—è —Å–º–∞–π–ª–∏–∫ &#9787;
    // –ø—Ä–∞–≤–æ—Å–ª–∞–≤–Ω—ã–π –∫—Ä–µ—Å—Ç &#9766;
    // –∫—Ä–µ—Å—Ç ‚úù
    // –Ω–∞—Ö–º—É—Ä–µ–Ω–Ω—ã–π —Å–º–∞–π–ª–∏–∫ &#9785;

    // –º–Ω–æ–≥–æ—É–≥–æ–ª—å–Ω–∏–∫	&#10040;	&#x2738;	‚ú∏

    //‚õî	 	&#9940;	–í—Ö–æ–¥ –∑–∞–ø—Ä–µ—â–µ–Ω (–∫–∏—Ä–ø–∏—á)
    //‚õ≥	 	&#9971;	–§–ª–∞–≥ –≤ –≤–æ—Ä–æ–Ω–∫–µ, –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, –º–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏, –≥–æ–ª—å—Ñ

    // ‚õë	&#9937;	\26D1	–®–ª–µ–º —Å –±–µ–ª—ã–º –∫—Ä–µ—Å—Ç–æ–º
    // ‚öë	&#9873;	\2691	–ó–∞–∫—Ä–∞—à–µ–Ω–Ω—ã–π —Ñ–ª–∞–≥
    // ‚öê	&#9872;	\2690	–ù–µ–∑–∞–∫—Ä–∞—à–µ–Ω–Ω—ã–π —Ñ–ª–∞–≥
    // ‚òπ	&#9785;	\2639	–ù–∞—Ö–º—É—Ä–µ–Ω–Ω—ã–π —Å–º–∞–π–ª–∏–∫
    // ‚ò∫	&#9786;	\263A	–£–ª—ã–±–∞—é—â–∏–π—Å—è —Å–º–∞–π–ª–∏–∫
    // ‚òª	&#9787;	\263B	–ó–∞–∫—Ä–∞—à–µ–Ω–Ω—ã–π —É–ª—ã–±–∞—é—â–∏–π—Å—è —Å–º–∞–π–ª–∏–∫

    /* –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –æ—Ç–∫—Ä—ã—Ç–æ–π —è—á–µ–π–∫–æ–π */
    /*
    matrixDoc[coordinate.y*row + coordinate.x].innerHTML = `${temp_bomb}`
    matrixDoc[coordinate.y*row + coordinate.x].classList.add('open')
    */
    /**************************************** */

    //if(!matrix[coordinate.x][coordinate.y].mineNear) –µ—Å–ª–∏ —Ä—è–¥–æ–º –º–∏–Ω –Ω–µ—Ç

    /**************************************** */
    // –∑–∞–ø–æ–º–∏–Ω–∞—é –≤ –º–∞—Ç—Ä–∏—Ü—É, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —è—á–µ–π–∫–∏, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–∫—Ä—ã–≤–∞–ª–∞—Å—å
    //matrix[coordinate.x][coordinate.y].mineOpen = true
    //console.log(matrix)
    /*
  })
})
*/

//let matrixDoc = document.querySelectorAll('.block')
//console.log(matrixDoc[1].innerHTML = '–£—Ä–∞')
//console.log(document.querySelectorAll('.block')[99].innerHTML = '–£—Ä–∞')

/****************************************************** */

/* –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∞–≤–æ–π –∫–ª–∞–≤–∏—à–∏ */
// document.querySelectorAll('.block')[99].addEventListener('contextmenu', function(event) {
// document.querySelectorAll('.block').forEach(function(block){
document.querySelector('.playboard').addEventListener('contextmenu', function(event) {
    event.preventDefault()
    // matrixDoc[1].innerHTML = '–£—Ä–∞'
    console.log(event.target.getAttribute("data"))
    let coorXY = JSON.parse(event.target.getAttribute("data"))
    //console.log(coorXY)
    //console.log(matrix[coorXY.x][coorXY.y])
    //if(event.target.matches('.block')) {
    if(event.target.matches('.block') && matrix[coorXY.x][coorXY.y].mineOpen !== true) {
      // –µ—Å–ª–∏ —è—á–µ–π–∫–∞ –Ω—É–∂–Ω–∞—è –∏ –µ—â–µ –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–ª–∞—Å—å

      //event.target.innerHTML = 'Bomb'
      //console.log('–ù–∞—à–ª–∏ —è—á–µ–π–∫—É')
      //console.log(matrix[coorXY.x][coorXY.y])
      event.target.classList.toggle('guess')
    }

  })

/***************************************************** */

/************************************************************************************** */
/*  –û—Ç–∫—Ä—ã—Ç–∏–µ —è—á–µ–π–∫–∏ */

const open = function(event){  // –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ –∫–ª–∏–∫–µ
  let coorXY = JSON.parse(event.target.getAttribute("data"))
  let x = coorXY.x
  let y = coorXY.y
  console.log(`—Ñ—É–Ω–∫—Ü–∏—è open x=${x}`)

  openNullBlock(x, y)
}

const openNullBlock = function(x, y){ // –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—è open –≤ –∫–æ—Ç–æ—Ä—É—é —è –≤—Å—Ç–∞–≤–ª—é —ç—Ç—É
  let index = y*row + x
  if(matrix[x][y].mineOpen) return; //–µ—Å–ª–∏ —è—á–µ–π–∫–∞ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞ - –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
  if(matrix[x][y].mineHere) {
    alert('Game over')
  } else { // –µ—Å–ª–∏ –º–∏–Ω—ã –Ω–µ—Ç
      let temp_bomb = ''
      temp_bomb = matrix[x][y].mineNear
      //if(temp_bomb === 0) temp_bomb = '';
      matrix[x][y].mineOpen = true
      matrixDoc[index].innerHTML = `${temp_bomb}`
      matrixDoc[index].classList.add('null') // Node –∫–æ–ª–ª–µ–∫—Ü–∏—è –≤—Å–µ—Ö –±–ª–æ–∫–æ–≤ (—Å—Ç–æ—è—Ç –ø–æ –ø–æ—Ä—è–¥–∫—É)
      scoreCloseBlock = scoreCloseBlock - 1 // —Å—á–∏—Ç–∞—é, —Å–∫–æ–ª—å–∫–æ —è—á–µ–µ–∫ –æ—Å—Ç–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å
      
      if(scoreCloseBlock === 0) alert('–ü–æ–±–µ–¥–∞');

      if(matrix[x][y].mineNear === 0){ // –æ–ø—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—É—Å—Ç—ã—Ö —è—á–µ–µ–∫
        /*
        let startX = x - 1
        if(startX < 0) startX = x;

        let finishX = x + 1
        if(finishX > row) finishX = x;

        let startY = y - 1
        if(startY < 0) startY = y;

        let finishY = y + 1
        if(finishY > column) finishY = y;

        for(let i = startX; i <= finishX; i++) { // –ø—Ä–æ–±–µ–≥–∞–µ–º—Å—è –ø–æ –≤—Å–µ–º —Å–æ—Å–µ–¥–Ω–∏–º —è—á–µ–π–∫–∞–º
          for (let j = startY; j <= finishY; j++) {
            openNullBlock(i, j)
          }
        }
        */
      
        
          // for (let i = 0; i < matrix.length; i++) {
            // for (let k = 0; k < matrix[i].length; k++) {
        
              if ((x-1) >= 0 && (y-1) >= 0 && matrix[x-1][y-1].mineNear === 0) openNullBlock(x-1, y-1);
              if ((x-1) >= 0 && (y) >= 0 && matrix[x-1][y].mineNear === 0) openNullBlock(x-1, y);
              if ((x-1) >= 0 && (y + 1) < matrix[x].length && matrix[x-1][y+1].mineNear === 0) openNullBlock(x-1, y+1);
              if ((x) >= 0 && (y + 1) < matrix[x].length && matrix[x][y+1].mineNear === 0) openNullBlock(x, y+1);
              if ((x+1) < matrix.length && (y + 1) < matrix[x].length && matrix[x+1][y+1].mineNear === 0) openNullBlock(x+1, y+1);
              if ((x+1) < matrix.length && (y) < matrix[x].length && matrix[x+1][y].mineNear === 0) openNullBlock(x+1, y);
              if ((x+1) < matrix.length && (y-1) >= 0 && matrix[x+1][y-1].mineNear === 0) openNullBlock(x+1, y-1);
              if ((x) < matrix.length && (y-1) >= 0 && matrix[x][y-1].mineNear === 0) openNullBlock(x, y-1);
             
          //  }
          // }
        






      }

  }

}


document.querySelector('.playboard').addEventListener('click', function(event) {
  if(event.target.matches('.block') && !(event.target.matches('.guess'))) {
    open(event)
  }
})


/********************************************************* */

/* –î–æ–±–∞–≤–ª—è—é –æ–±–ª–∞—Å—Ç—å –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ */

//let str = 'EEE' –æ–ø—ã—Ç—ã —Å–æ —Å—Ç—Ä–æ–∫–æ–π –≤–≤–æ–¥–∞
let str = '' //–æ–ø—ã—Ç—ã —Å–æ —Å—Ç—Ä–æ–∫–æ–π –≤–≤–æ–¥–∞

function text() {
  //document.querySelector('.wrapper-text').innerHTML += `<textarea class="textarea" autofocus accesskey="s"></textarea>`;
  document.querySelector('.wrapper-text').innerHTML += `<textarea class="textarea" type="text" id="text-input" rows="6" cols="70" autofocus></textarea>`;
  //document.querySelector('.wrapper-text').innerHTML += `<textarea class="textarea" value="EEE" id="text-input" rows="6" cols="70" autofocus>${str}</textarea>`;
  //document.querySelector('.wrapper-text').innerHTML += `<textarea class="textarea" id="text-input" rows="6" cols="70" autofocus>${str}</textarea>`;
}

text()

/* –ò–≥—Ä—ã —Å —è–∑—ã–∫–æ–º */

let lang = document.getElementById('lang')
console.log(lang)

// let lang = document.querySelector('.lang')
// console.log(lang)
// lang.addEventListener("click", console.log(k));

// function changeLange() {
//   if (k === 0) {k = 1}
//     else{
//         k = 0
//       }
//       console.log(k)
// }

// btn_del.onclick = function clear () {
//   textarea.value = "";
// }

function changeLange () {
  if (k === 0) {k = 1}
    else{
        k = 0
      }
      console.log(`–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –∫ = ${k}`)
}

//lang.addEventListener("click", console.log(k));

// if(indexFuncButton === 56){

//   console.log('–ö–∞–∫ –ø–æ–∂–∏–≤–∞–µ—Ç —è–∑—ã–∫')
//   if (k === 0) {k = 1}else{
//     k = 0
//     start()
//     text()
//   }

// }



/* –ø—Ä–æ–±—É—é —Å–¥–µ–ª–∞—Ç—å, —á—Ç–æ–±—ã –Ω–µ –º–æ–∂–Ω–æ –±—ã–ª–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –∫ –≤–≤–æ–¥—É —Å –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã*/

let textInput = document.getElementById("text-input"); // —ç—Ç–æ –æ–¥–Ω–æ –∏ —Ç–æ–∂–µ - –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å –Ω–µ —É—Å–ø–µ–≤–∞—é
let textarea = document.querySelector('textarea'); // —ç—Ç–æ –æ–¥–Ω–æ –∏ —Ç–æ–∂–µ - –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å –Ω–µ —É—Å–ø–µ–≤–∞—é

let currentText = textarea.value;


// let cursorStart = textarea.selectionStart;
// let cursorEnd = textarea.selectionEnd;

//textInput.focus();

//let str = document.querySelector('.textarea').innerHTML


/******  —Ä–∞–±–æ—Ç–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã *******************************************/

let flag = false // –æ—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç Shift + Alt
document.onkeydown = (event) => {

  // console.log(event) –Ω–∞–¥–æ –±—ã–ª–æ –≤—ã—Ç–∞—â–∏—Ç—å code —Ä–æ–ø—É—â–µ–Ω–Ω–æ–≥–æ DEL

  if (event.code == 'ShiftLeft' || event.code == 'ShiftRight') flag = true  // –æ—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç Shift + Alt
  if (event.code == 'AltLeft' && flag || event.code === 'AltRight' && flag){ // –æ—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç Shift + Alt
    flag = false // —á—Ç–æ–±—ã —Å—Ä–∞–±–æ—Ç–∞–ª–æ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
    console.log('–£—Ä–∞ –∑–∞—Ä–∞–±–æ—Ç–∞–ª–æ')
  } // –æ—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç Shift + Alt

  /* –∑–∞–≥–Ω–∞–ª –≤ –æ–¥–Ω—É —Ñ—É–Ω–∫—Ü–∏—é, –Ω–∞–¥–æ –≤–µ—à–∞—Ç—å —Å–ª—É—à–∞—Ç–µ–ª–∏, –Ω–æ –Ω–µ —É—Å–ø–µ–≤–∞—é */
  document.querySelectorAll('.key').forEach(function (element) {
    element.classList.remove('active')
  })

 
  document.querySelector(`.key[data="${event.code}"]`).classList.add('active');
  textInput.focus();  // —á—Ç–æ–±—ã —Å—Ä–∞–∑—É –≤–≤–æ–¥–∏–ª–æ –≤ —Ñ–æ—Ä–º—É
}


/*******  —Ä–∞–±–æ—Ç–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã    *********************************************************** */

document.querySelectorAll('.keyboard .key').forEach(function (element) {
  
  element.onclick = function(event){

    /******–õ–æ–≤–ª—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Å–º–µ–Ω—ã —è–∑—ã–∫–∞***************************************************************************** */
    
    console.log(`–ü—Ä–∏–≤–µ—Ç —á—Ç–æ-—Ç–æ ${element.innerHTML}---------------------`)

    if(element.innerHTML === 'lang') {
      console.log(`–¢–µ—Å—Ç –Ω–∞ —è–∑—ã–∫-----------------------------------------`)
      changeLange ()  // –ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ –º–µ–Ω—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é 'k' –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ 'lang'
      // start()
      // text()
    }

    /************************************************************************************************* */

    document.querySelectorAll('.keyboard .key').forEach(function (element) {

      element.classList.remove('active')
    });

    let code = this.getAttribute('data')
    this.classList.add('active')
    console.log(code)


    let cursorStart = textarea.selectionStart;
    let cursorEnd = textarea.selectionEnd;

    // console.log(cursorStart)
    // console.log(cursorEnd)

    let indexFuncButton = codeKeyboard.indexOf(code)

    if (funcButtonIndexArr.includes(indexFuncButton)){
      console.log(`–ù–∞—á–∏–Ω–∞—é—Ç—Å—è –º—É—á–µ–Ω–∏—è`)
      console.log(`–ò–Ω–¥–µ–∫—Å= ${codeKeyboard.indexOf(code)}`)

      if(indexFuncButton === 13){
        // console.log(`–ù–∞—á–∞–ª–æ—Å—å`)

        // console.log(textarea.value)
        /*
        let letter = `${String.fromCharCode(abcKeys[codeKeyboard.indexOf(code)])}`;
        */

        if (cursorStart === 0) cursorStart = 1;
        textarea.value = textarea.value.slice(0, cursorStart-1) + textarea.value.slice(cursorEnd); //—Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –ø–æ—Ç–æ–º –∫—É—Ä—Å–æ—Ä —É–±–µ–≥–∞–µ—Ç

        textarea.selectionStart = textarea.selectionEnd = cursorEnd - 1 // —á—Ç–æ–±—ã –∫—É—Ä—Å–æ—Ä –Ω–µ —É–±–µ–≥–∞–ª
        if (textarea.selectionStart < 0 || textarea.selectionEnd < 0) textarea.selectionStart = textarea.selectionEnd = 0;
        textInput.focus();
      }

      if(indexFuncButton === 28){  // —Ä–∞–±–æ—Ç–∞ –∫–ª–∞–≤–∏—à–∏ DEL
        //console.log(`–ù–∞—á–∞–ª–æ—Å—å`)
        textarea.value = textarea.value.slice(0, cursorStart) + textarea.value.slice(cursorEnd+1); 
        textarea.selectionStart = textarea.selectionEnd = cursorStart// —á—Ç–æ–±—ã –∫—É—Ä—Å–æ—Ä –Ω–µ —É–±–µ–≥–∞–ª
        textInput.focus();
      }

      if(indexFuncButton === 14){
        // console.log(`–ò —Å–Ω–æ–≤–∞ –ù–∞—á–∞–ª–æ—Å—å`)

        // console.log(textarea.value)
        /*
        let letter = `${String.fromCharCode(abcKeys[codeKeyboard.indexOf(code)])}`;
        */


        textarea.value = textarea.value.slice(0, cursorStart) + '  ' + textarea.value.slice(cursorEnd); //—Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –ø–æ—Ç–æ–º –∫—É—Ä—Å–æ—Ä —É–±–µ–≥–∞–µ—Ç

        //textarea.value = textarea.value.slice(0, cursorStart) + '\t' + textarea.value.slice(cursorEnd);
        textarea.selectionStart = textarea.selectionEnd = cursorEnd + 2 // —á—Ç–æ–±—ã –∫—É—Ä—Å–æ—Ä –Ω–µ —É–±–µ–≥–∞–ª
        //textarea.selectionStart = textarea.selectionEnd  + '\t' // —á—Ç–æ–±—ã –∫—É—Ä—Å–æ—Ä –Ω–µ —É–±–µ–≥–∞–ª

        textInput.focus();
      }
      if(indexFuncButton === 41){
        // console.log(`–ò —Å–Ω–æ–≤–∞ –ù–∞—á–∞–ª–æ—Å—å`)

        // console.log(textarea.value)
        /*
        let letter = `${String.fromCharCode(abcKeys[codeKeyboard.indexOf(code)])}`;
        */


        textarea.value = textarea.value.slice(0, cursorStart) + '\n' + textarea.value.slice(cursorEnd); //—Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –ø–æ—Ç–æ–º –∫—É—Ä—Å–æ—Ä —É–±–µ–≥–∞–µ—Ç

        textarea.selectionStart = textarea.selectionEnd = cursorEnd + 2 // —á—Ç–æ–±—ã –∫—É—Ä—Å–æ—Ä –Ω–µ —É–±–µ–≥–∞–ª

        textInput.focus();
      }

      


    } else {

    /* —Ñ–æ—Ä–º–∏—Ä—É—é –º–∞—Å—Å–∏–≤ –Ω—É–∂–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤ */
    // console.log(`–ò–Ω–¥–µ–∫—Å= ${codeKeyboard.indexOf(code)}`)
    // index.push(codeKeyboard.indexOf(code))
    // console.log(index)

    /* –≤–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç –≤ —Ñ–æ—Ä–º—É */

   // document.querySelector('.textarea').innerHTML += `${String.fromCharCode(abcKeys[codeKeyboard.indexOf(code)])}`; // —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
   //document.querySelector('.textarea').value += `${String.fromCharCode(abcKeys[codeKeyboard.indexOf(code)])}`; // —Ä–∞–±–æ—Ç–∞–µ—Ç
   //document.querySelector('.textarea').value += `${String.fromCharCode(abcKeys[codeKeyboard.indexOf(code)])}`;
   //textarea.value += `${String.fromCharCode(abcKeys[codeKeyboard.indexOf(code)])}`;
    //textInput.focus();

    //let currentText = textarea.value; // –ø–æ–∫–∞ –Ω–∏–≥–¥–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é
    let letter = `${String.fromCharCode(abcKeys[codeKeyboard.indexOf(code)])}`;
    //textarea.value += letter;

    // let cursorStart = textarea.selectionStart;
    // let cursorEnd = textarea.selectionEnd;

    // console.log(cursorStart)
    // console.log(cursorEnd)

    //textarea.value = textarea.value.setRangeText(letter, cursorStart, cursorEnd, "end")   //–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç

    textarea.value = textarea.value.slice(0, cursorStart) + letter + textarea.value.slice(cursorEnd); //—Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –ø–æ—Ç–æ–º –∫—É—Ä—Å–æ—Ä —É–±–µ–≥–∞–µ—Ç
    textInput.focus();
    textarea.selectionStart = textarea.selectionEnd = cursorEnd + 1 // —á—Ç–æ–±—ã –∫—É—Ä—Å–æ—Ä –Ω–µ —É–±–µ–≥–∞–ª


    }


  }
})



/* –î–≤–µ –∫–ª–∞–≤–∏—à–∏, –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –∫–ª–∞–≤–∏—à */

// let flag = false
// document.onkeydown = function (event) {

// // codeKeyboard.push(event.code)
// console.log(event.code)
// // console.log(codeKeyboard)
//   // –Ω–∞–¥–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å event.code
//   if (event.code == 'AltLeft') flag = true
//   if (event.code == 'ShiftLeft' || event.code == 'ShiftRight') flag = true
//   if (event.code == 'KeyN' && flag) {
//     flag = false // —á—Ç–æ–±—ã —Å—Ä–∞–±–æ—Ç–∞–ª–æ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
//     console.log('–£—Ä–∞ –∑–∞—Ä–∞–±–æ—Ç–∞–ª–æ')}

// }



/* –î–≤–µ –∫–ª–∞–≤–∏—à–∏, –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –∫–ª–∞–≤–∏—à */

// document.onkeydown = function (event) {
//   if (event.code == 'AltLeft') {
//     document.onkeyup = function (event) {
//       console.log(event)
//           if (event.code == 'KeyN') {
//             console.log('New version')
//           } 
//           else {
//             document.onkeydown = null
//           } 
//     }
//   }
// }



/* –ø–æ–º–æ–≥–∞–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –º–∞—Å—Å–∏–≤ charCode –∫–ª–∞–≤–∏—à*/

// let rus = []

// document.onkeypress = function(event){
//   // console.log(event)
//   rus.push(event.charCode)
//   console.log(rus)
// }



